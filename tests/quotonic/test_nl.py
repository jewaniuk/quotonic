import numpy as np

import quotonic.nl as nl


def test_build_kerr():
    # n < 2
    n = 1
    m = 2
    varphi = np.pi
    result = np.array([[1.0 + 0.0j, 0.0 + 0.0j], [0.0 + 0.0j, 1.0 + 0.0j]], dtype=complex)
    assert np.allclose(nl.build_kerr(n, m, varphi), result)

    # symmetric, no burnout map
    n = 2
    m = 4
    varphi = np.pi
    result = np.array(
        [
            [
                -1.0 + 1.2246468e-16j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                1.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                1.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                1.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                -1.0 + 1.2246468e-16j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                1.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                1.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                -1.0 + 1.2246468e-16j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                1.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
            ],
            [
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                0.0 + 0.0000000e00j,
                -1.0 + 1.2246468e-16j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_kerr(n, m, varphi), result)

    # asymmetric, no burnout map
    n = 3
    m = 2
    varphi = np.pi / 2
    result = np.array(
        [
            [
                -1.8369702e-16 - 1.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                6.1232340e-17 + 1.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                6.1232340e-17 + 1.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                6.1232340e-17 + 1.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                6.1232340e-17 + 1.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                6.1232340e-17 + 1.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                6.1232340e-17 + 1.0j,
                0.0000000e00 + 0.0j,
            ],
            [
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                0.0000000e00 + 0.0j,
                -1.8369702e-16 - 1.0j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_kerr(n, m, varphi, basis_type="asymmetric"), result)

    # symmetric, with burnout map
    n = 2
    m = 2
    varphi = np.pi
    burnout_map = np.array([1, 0])
    result = np.array(
        [
            [-1.0 + 1.2246468e-16j, 0.0 + 0.0000000e00j, 0.0 + 0.0000000e00j],
            [0.0 + 0.0000000e00j, 1.0 + 0.0000000e00j, 0.0 + 0.0000000e00j],
            [0.0 + 0.0000000e00j, 0.0 + 0.0000000e00j, 1.0 + 0.0000000e00j],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_kerr(n, m, varphi, burnout_map=burnout_map), result)

    # asymmetric, with burnout map
    n = 2
    m = 3
    varphi = np.pi / 4
    burnout_map = np.array([0, 1, 0])
    result = np.array(
        [
            [
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.70710678 + 0.70710678j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_kerr(n, m, varphi, basis_type="asymmetric", burnout_map=burnout_map), result)


def test_build_photon_mp():
    # n < 2
    n = 1
    m = 2
    varphi1 = 0.0
    varphi2 = np.pi
    result = np.array([[1.0 + 0.0j, 0.0 + 0.0j], [0.0 + 0.0j, 1.0 + 0.0j]], dtype=complex)
    assert np.allclose(nl.build_photon_mp(n, m, varphi1, varphi2), result)

    # symmetric, no burnout map
    n = 2
    m = 4
    varphi1 = 0.0
    varphi2 = np.pi
    result = np.array(
        [
            [
                -1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                -1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                -1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                -1.0 + 0.0j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_photon_mp(n, m, varphi1, varphi2), result)

    # asymmetric, no burnout map
    n = 3
    m = 2
    varphi1 = np.pi / 2
    varphi2 = np.pi
    result = np.array(
        [
            [
                3.061617e-16 + 1.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                1.000000e00 - 2.4492936e-16j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                1.000000e00 - 2.4492936e-16j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                1.000000e00 - 2.4492936e-16j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                1.000000e00 - 2.4492936e-16j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                1.000000e00 - 2.4492936e-16j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                1.000000e00 - 2.4492936e-16j,
                0.000000e00 + 0.0000000e00j,
            ],
            [
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                0.000000e00 + 0.0000000e00j,
                3.061617e-16 + 1.0000000e00j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_photon_mp(n, m, varphi1, varphi2, basis_type="asymmetric"), result)

    # symmetric, with burnout map
    n = 2
    m = 2
    varphi1 = np.pi
    varphi2 = 0.0
    burnout_map = np.array([1, 0])
    result = np.array(
        [
            [-1.0 + 1.2246468e-16j, 0.0 + 0.0000000e00j, 0.0 + 0.0000000e00j],
            [0.0 + 0.0000000e00j, -1.0 + 1.2246468e-16j, 0.0 + 0.0000000e00j],
            [0.0 + 0.0000000e00j, 0.0 + 0.0000000e00j, 1.0 + 0.0000000e00j],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_photon_mp(n, m, varphi1, varphi2, burnout_map=burnout_map), result)

    # asymmetric, with burnout map
    n = 2
    m = 3
    varphi1 = np.pi / 4
    varphi2 = np.pi
    burnout_map = np.array([0, 1, 0])
    result = np.array(
        [
            [
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.70710678 + 0.70710678j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.70710678 + 0.70710678j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                -0.70710678 - 0.70710678j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.70710678 + 0.70710678j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.70710678 + 0.70710678j,
                0.0 + 0.0j,
            ],
            [
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                0.0 + 0.0j,
                1.0 + 0.0j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(nl.build_photon_mp(n, m, varphi1, varphi2, basis_type="asymmetric", burnout_map=burnout_map), result)
