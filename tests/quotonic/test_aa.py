import numpy as np
from jax import config

import quotonic.aa as aa
from quotonic.perm import Permanent, calc_perm

config.update("jax_enable_x64", True)


def test_symmetric_transform():
    # 50:50 beamsplitter
    U = np.array([[1, 1], [1, -1]], dtype=complex) / np.sqrt(2)
    n = 1
    assert np.allclose(aa.symmetric_transform(U, n), U, atol=1e-4)
    n = 2
    result = np.array([[0.5, 2**-0.5, 0.5], [2**-0.5, 0, -(2**-0.5)], [0.5, -(2**-0.5), 0.5]], dtype=complex)
    assert np.allclose(aa.symmetric_transform(U, n), result, atol=1e-4)
    n = 3
    result = np.array(
        [
            [0.35355339 + 0.0j, 0.61237244 + 0.0j, 0.61237244 + 0.0j, 0.35355339 + 0.0j],
            [0.61237244 + 0.0j, 0.35355339 + 0.0j, -0.35355339 + 0.0j, -0.61237244 + 0.0j],
            [0.61237244 + 0.0j, -0.35355339 + 0.0j, -0.35355339 + 0.0j, 0.61237244 + 0.0j],
            [0.35355339 + 0.0j, -0.61237244 + 0.0j, 0.61237244 + 0.0j, -0.35355339 + 0.0j],
        ],
        dtype=complex,
    )
    assert np.allclose(aa.symmetric_transform(U, n), result, atol=1e-4)

    # random n = 2, m = 4
    n = 2
    U = np.array(
        [
            [-0.22668856 - 0.21622862j, 0.84162447 + 0.35198945j, -0.04294921 - 0.04551246j, 0.23509183 + 0.10220066j],
            [0.4479422 - 0.39125107j, -0.06198806 - 0.27956855j, 0.26883754 - 0.2545647j, 0.59177441 + 0.27748068j],
            [0.16355736 + 0.67476055j, -0.04179944 + 0.2702498j, -0.10611906 + 0.00785614j, 0.61082897 - 0.24234281j],
            [0.21426873 - 0.14199985j, -0.02230497 - 0.10242525j, -0.87772793 + 0.27798898j, 0.09002401 + 0.2591293j],
        ],
        dtype=complex,
    )
    result = np.array(
        [
            [
                4.63288713e-03 + 0.09803311j,
                -1.62176985e-01 - 0.37020615j,
                -1.48495041e-04 + 0.02772425j,
                -4.41148658e-02 - 0.10465365j,
                5.84435176e-01 + 0.59248587j,
                -2.84641597e-02 - 0.07555021j,
                2.28940645e-01 + 0.23866893j,
                -2.26749376e-04 + 0.00390945j,
                -7.70124834e-03 - 0.02133913j,
                4.48231936e-02 + 0.04805308j,
            ],
            [
                -2.63246028e-01 - 0.01154816j,
                4.68316628e-01 - 0.09483696j,
                -1.53032131e-01 - 0.00400649j,
                7.11444448e-02 - 0.2370602j,
                6.53854739e-02 - 0.36360969j,
                3.05802827e-01 - 0.10479143j,
                4.14380756e-01 + 0.36977338j,
                -3.27139073e-02 - 0.00184145j,
                7.64307745e-02 - 0.07122139j,
                1.56642000e-01 + 0.17778528j,
            ],
            [
                1.53903149e-01 - 0.26633358j,
                -3.19435223e-02 + 0.57324115j,
                4.94400524e-02 - 0.01525925j,
                -2.21379365e-01 + 0.098204j,
                -1.84278405e-01 + 0.30085397j,
                -7.79826899e-02 - 0.04044549j,
                5.61944306e-01 + 0.0703053j,
                6.95125854e-03 + 0.00635311j,
                -6.30148659e-02 - 0.02639042j,
                2.38109010e-01 + 0.00771356j,
            ],
            [
                -1.12114186e-01 - 0.0199988j,
                2.13225266e-01 - 0.01604861j,
                2.43414619e-01 + 0.12311986j,
                1.00509064e-01 - 0.08969201j,
                2.44378916e-02 - 0.13301345j,
                -8.40270136e-01 - 0.06957441j,
                -1.02201581e-02 + 0.22341814j,
                7.12052053e-02 + 0.03960951j,
                -2.26830171e-01 - 0.03957805j,
                -7.52259259e-03 + 0.09916422j,
            ],
            [
                4.75748148e-02 - 0.35051573j,
                -1.93957357e-01 - 0.14280397j,
                2.94509520e-02 - 0.31001435j,
                5.28414313e-01 - 0.15165611j,
                -7.43160546e-02 + 0.03465982j,
                -1.24214622e-01 - 0.08397395j,
                5.78299131e-02 - 0.2582948j,
                7.47043643e-03 - 0.1368731j,
                3.24884400e-01 - 0.10754762j,
                2.73201425e-01 + 0.32841193j,
            ],
            [
                4.76964781e-01 + 0.33695297j,
                2.65515015e-01 + 0.04985777j,
                1.71279093e-01 + 0.18480333j,
                8.83552329e-02 + 0.09714697j,
                1.10512886e-01 - 0.00716505j,
                6.63332450e-02 + 0.11247452j,
                -2.05340468e-01 - 0.00741783j,
                -3.75175176e-02 + 0.04119066j,
                3.75433617e-02 - 0.24544326j,
                6.06299377e-01 + 0.03688405j,
            ],
            [
                5.71659248e-02 - 0.20851249j,
                -1.03046121e-01 - 0.08825425j,
                -2.62952565e-01 + 0.37521484j,
                3.07911135e-01 + 0.05627651j,
                -3.85404829e-02 + 0.01779775j,
                1.00055361e-01 + 0.20629543j,
                8.20855065e-02 - 0.10803264j,
                -2.33628132e-01 + 0.42167948j,
                -5.06386493e-01 - 0.03229903j,
                -2.63460477e-02 + 0.25219106j,
            ],
            [
                -4.28550790e-01 + 0.22072411j,
                -2.67555785e-01 + 0.02262279j,
                -3.20426380e-02 - 0.09944753j,
                3.72544782e-01 + 0.5268318j,
                -7.12877612e-02 - 0.02259258j,
                3.27050607e-03 - 0.04102215j,
                5.65130870e-02 + 0.24777899j,
                1.11995360e-02 - 0.00166737j,
                -8.89776746e-02 + 0.04315607j,
                3.14381993e-01 - 0.29606002j,
            ],
            [
                1.85065577e-01 + 0.17162184j,
                9.48834942e-02 + 0.03203868j,
                -3.52757286e-01 - 0.53003682j,
                -6.36572346e-02 - 0.03553695j,
                4.04645230e-02 - 0.00247006j,
                -3.52662807e-02 - 0.23813154j,
                -1.12239139e-01 - 0.04366135j,
                1.28636502e-01 - 0.05147099j,
                -4.80362036e-01 + 0.35572346j,
                1.66576533e-01 + 0.1929935j,
            ],
            [
                2.57471313e-02 - 0.06085226j,
                -2.73277364e-02 - 0.02655784j,
                -2.10145425e-01 + 0.26050037j,
                7.93170897e-02 + 0.06044336j,
                -9.99342015e-03 + 0.00456918j,
                6.79540731e-02 + 0.11837104j,
                3.46954677e-02 - 0.02121406j,
                6.93128446e-01 - 0.48799738j,
                -2.13619331e-01 - 0.28626418j,
                -5.90436717e-02 + 0.04665572j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(aa.symmetric_transform(U, n), result, atol=1e-4)

    # random n = 4, m = 2
    n = 4
    U = np.array(
        [
            [1.11895135e-01 + 0.77749458j, -1.15952494e-05 - 0.61885512j],
            [-1.14623614e-01 + 0.60814726j, -2.53951746e-01 + 0.7433215j],
        ],
        dtype=complex,
    )
    result = np.array(
        [
            [
                0.32016261 - 2.06003033e-01j,
                -0.54556545 + 2.49433725e-01j,
                0.5553335 - 1.63247876e-01j,
                -0.36854525 + 5.30612842e-02j,
                0.14667495 - 1.09927678e-05j,
            ],
            [
                0.58232822 - 1.44057949e-01j,
                -0.32658202 + 3.26343883e-02j,
                -0.27841327 - 1.20686725e-02j,
                0.55252267 + 1.04107329e-01j,
                -0.35235626 - 1.20358484e-01j,
            ],
            [
                0.57665587 + 5.01314794e-02j,
                0.27135943 + 6.34323122e-02j,
                -0.38917709 - 1.52090995e-01j,
                -0.24246418 - 1.37370735e-01j,
                0.45784395 + 3.54152620e-01j,
            ],
            [
                0.34059697 + 1.50448688e-01j,
                0.47670381 + 2.98115936e-01j,
                0.21282188 + 1.79906767e-01j,
                -0.21791598 - 2.45425028e-01j,
                -0.33034354 - 5.00731456e-01j,
            ],
            [
                0.10780127 + 9.94606861e-02j,
                0.2349093 + 2.88892236e-01j,
                0.29749025 + 4.96532689e-01j,
                0.23187245 + 5.53257637e-01j,
                0.09564539 + 3.68501429e-01j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(aa.symmetric_transform(U, n), result, atol=1e-4)


def test_SymmetricTransformer():
    # 50:50 beamsplitter
    U = np.array([[1, 1], [1, -1]], dtype=complex) / np.sqrt(2)
    m = 2
    n = 2
    result = np.array([[0.5, 2**-0.5, 0.5], [2**-0.5, 0, -(2**-0.5)], [0.5, -(2**-0.5), 0.5]], dtype=complex)
    assert np.allclose(aa.SymmetricTransformer(n, m).transform(U), result, atol=1e-4)
    n = 3
    result = np.array(
        [
            [0.35355339 + 0.0j, 0.61237244 + 0.0j, 0.61237244 + 0.0j, 0.35355339 + 0.0j],
            [0.61237244 + 0.0j, 0.35355339 + 0.0j, -0.35355339 + 0.0j, -0.61237244 + 0.0j],
            [0.61237244 + 0.0j, -0.35355339 + 0.0j, -0.35355339 + 0.0j, 0.61237244 + 0.0j],
            [0.35355339 + 0.0j, -0.61237244 + 0.0j, 0.61237244 + 0.0j, -0.35355339 + 0.0j],
        ],
        dtype=complex,
    )
    assert np.allclose(aa.SymmetricTransformer(n, m).transform(U), result, atol=1e-4)

    # random n = 4, m = 2
    n = 4
    m = 2
    U = np.array(
        [
            [1.11895135e-01 + 0.77749458j, -1.15952494e-05 - 0.61885512j],
            [-1.14623614e-01 + 0.60814726j, -2.53951746e-01 + 0.7433215j],
        ],
        dtype=complex,
    )
    result = np.array(
        [
            [
                0.32016261 - 2.06003033e-01j,
                -0.54556545 + 2.49433725e-01j,
                0.5553335 - 1.63247876e-01j,
                -0.36854525 + 5.30612842e-02j,
                0.14667495 - 1.09927678e-05j,
            ],
            [
                0.58232822 - 1.44057949e-01j,
                -0.32658202 + 3.26343883e-02j,
                -0.27841327 - 1.20686725e-02j,
                0.55252267 + 1.04107329e-01j,
                -0.35235626 - 1.20358484e-01j,
            ],
            [
                0.57665587 + 5.01314794e-02j,
                0.27135943 + 6.34323122e-02j,
                -0.38917709 - 1.52090995e-01j,
                -0.24246418 - 1.37370735e-01j,
                0.45784395 + 3.54152620e-01j,
            ],
            [
                0.34059697 + 1.50448688e-01j,
                0.47670381 + 2.98115936e-01j,
                0.21282188 + 1.79906767e-01j,
                -0.21791598 - 2.45425028e-01j,
                -0.33034354 - 5.00731456e-01j,
            ],
            [
                0.10780127 + 9.94606861e-02j,
                0.2349093 + 2.88892236e-01j,
                0.29749025 + 4.96532689e-01j,
                0.23187245 + 5.53257637e-01j,
                0.09564539 + 3.68501429e-01j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(aa.SymmetricTransformer(n, m, algo="bbfg").transform(U), result, atol=1e-4)
    assert np.allclose(aa.SymmetricTransformer(n, m, algo="ryser").transform(U), result, atol=1e-4)


def test_asymmetric_transform():
    # 50:50 beamsplitter
    U = np.array([[1, 1], [1, -1]], dtype=complex) / np.sqrt(2)
    n = 1
    assert np.allclose(np.asarray(aa.asymmetric_transform(U, n)), U, atol=1e-4)
    n = 2
    result = np.array(
        [[0.5, 0.5, 0.5, 0.5], [0.5, -0.5, 0.5, -0.5], [0.5, 0.5, -0.5, -0.5], [0.5, -0.5, -0.5, 0.5]], dtype=complex
    )
    assert np.allclose(np.asarray(aa.asymmetric_transform(U, n)), result, atol=1e-4)
    n = 3
    result = np.array(
        [
            [
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 - 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 - 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 - 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 - 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 + 0.0j,
                0.35355339 + 0.0j,
            ],
            [
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 - 0.0j,
                -0.35355339 + 0.0j,
                0.35355339 - 0.0j,
                0.35355339 + 0.0j,
                -0.35355339 + 0.0j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(np.asarray(aa.asymmetric_transform(U, n)), result, atol=1e-4)

    # random n = 2, m = 3
    n = 2
    U = np.array(
        [
            [-0.55081332 - 0.13262899j, -0.62563656 + 0.44194869j, 0.11783934 - 0.27997926j],
            [0.44910185 + 0.13917455j, 0.00185757 + 0.31579694j, 0.81657036 - 0.11144349j],
            [-0.06468938 - 0.67362266j, 0.31861806 + 0.46044721j, 0.03664213 + 0.47662989j],
        ],
        dtype=complex,
    )
    result = np.array(
        [
            [
                0.28580486 + 0.14610762j,
                -0.2289127 - 0.13622312j,
                -0.05371012 + 0.37962002j,
                -0.2289127 - 0.13622312j,
                0.18232292 + 0.1250071j,
                0.06469901 - 0.3115283j,
                -0.05371012 + 0.37962002j,
                0.06469901 - 0.3115283j,
                -0.44958278 + 0.08715247j,
            ],
            [
                0.40322415 - 0.16045368j,
                0.04086065 - 0.17419153j,
                -0.11443042 - 0.29587844j,
                -0.34248255 + 0.11140729j,
                -0.04311666 + 0.14208352j,
                0.07900943 + 0.25113122j,
                0.33817869 + 0.39285358j,
                0.21260781 - 0.02168001j,
                0.28955647 - 0.24441439j,
            ],
            [
                -0.10204085 + 0.13858739j,
                -0.46455847 - 0.04691634j,
                0.04303197 - 0.2673939j,
                0.09188786 - 0.10933897j,
                0.38223336 + 0.06359634j,
                -0.0498787 + 0.21915502j,
                -0.19622333 - 0.06126757j,
                -0.1278943 - 0.54285109j,
                0.31869834 - 0.05551586j,
            ],
            [
                0.40322415 - 0.16045368j,
                -0.34248255 + 0.11140729j,
                0.33817869 + 0.39285358j,
                0.04086065 - 0.17419153j,
                -0.04311666 + 0.14208352j,
                0.21260781 - 0.02168001j,
                -0.11443042 - 0.29587844j,
                0.07900943 + 0.25113122j,
                0.28955647 - 0.24441439j,
            ],
            [
                0.19610246 - 0.55299851j,
                -0.14072821 - 0.19675316j,
                -0.40283314 - 0.14725977j,
                -0.14072821 - 0.19675316j,
                -0.09972426 + 0.00117323j,
                -0.14481597 + 0.10147392j,
                -0.40283314 - 0.14725977j,
                -0.14481597 + 0.10147392j,
                -0.11049416 + 0.29341359j,
            ],
            [
                0.05001187 + 0.2272442j,
                -0.46162396 + 0.43060532j,
                -0.23357061 - 0.28200314j,
                0.08863549 + 0.03669322j,
                0.03671035 + 0.25766341j,
                -0.1504502 + 0.01245685j,
                0.16646141 - 0.03494765j,
                0.31148791 + 0.34047963j,
                -0.20778806 + 0.16873465j,
            ],
            [
                -0.10204085 + 0.13858739j,
                0.09188786 - 0.10933897j,
                -0.19622333 - 0.06126757j,
                -0.46455847 - 0.04691634j,
                0.38223336 + 0.06359634j,
                -0.1278943 - 0.54285109j,
                0.04303197 - 0.2673939j,
                -0.0498787 + 0.21915502j,
                0.31869834 - 0.05551586j,
            ],
            [
                0.05001187 + 0.2272442j,
                0.08863549 + 0.03669322j,
                0.16646141 - 0.03494765j,
                -0.46162396 + 0.43060532j,
                0.03671035 + 0.25766341j,
                0.31148791 + 0.34047963j,
                -0.23357061 - 0.28200314j,
                -0.1504502 + 0.01245685j,
                -0.20778806 + 0.16873465j,
            ],
            [
                -0.06450228 - 0.06598514j,
                0.06502225 - 0.2417552j,
                0.13776437 + 0.04590672j,
                0.06502225 - 0.2417552j,
                0.6543675 - 0.18200291j,
                0.08303818 + 0.38511831j,
                0.13776437 + 0.04590672j,
                0.08303818 + 0.38511831j,
                -0.2258334 + 0.03492947j,
            ],
        ],
        dtype=complex,
    )
    assert np.allclose(np.asarray(aa.asymmetric_transform(U, n)), result, atol=1e-4)


def test_extra_perm():
    U = np.array(
        [
            [0.05030219 - 0.05710856j, 0.38623717 - 0.37529863j, 0.03448542 + 0.12082856j, 0.57700862 + 0.59619826j],
            [0.9109055 + 0.26600087j, -0.25189162 - 0.13916038j, -0.08436918 - 0.03166838j, -0.0461551 + 0.08017707j],
            [0.19494714 - 0.11139955j, 0.38728436 - 0.12388739j, 0.81554126 - 0.23149101j, -0.18106198 - 0.18102326j],
            [-0.17608286 + 0.11083131j, -0.65066956 + 0.1960833j, 0.50498278 - 0.04885628j, 0.07132948 + 0.48208846j],
        ],
        dtype=complex,
    )
    result = -0.1762361228466034 + 0.014973999932408333j
    assert np.allclose(complex(calc_perm(U, algo="ryser")), result, atol=1e-4)

    U = np.ones((1, 1), dtype=float)
    result = 1.0
    assert np.allclose(Permanent(1).perm(U), result)
